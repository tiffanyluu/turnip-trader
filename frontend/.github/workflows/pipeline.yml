name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: backend/package-lock.json
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: turnip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Setup test database
        run: |
          cd backend
          npm run setup
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/turnip_test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Seed test database
        run: |
          cd backend
          npm run seed-guides
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/turnip_test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps
      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
        env:
          VITE_API_URL: http://localhost:3001/api
          DATABASE_URL: postgresql://postgres:test@localhost:5432/turnip_test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Status
        run: |
          echo "All tests passed!"
          echo "Vercel will automatically deploy to production"