name: CI/CD Pipeline
on:
  push:
    branches: [main]

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-build]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: turnip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Setup test database
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-client
          PGPASSWORD=test psql -h localhost -U postgres -d turnip_test -f - << 'EOF'
          CREATE TABLE guides (
            id SERIAL PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            content TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );
          CREATE TABLE turnip_weeks (
            id SERIAL PRIMARY KEY,
            week_date DATE NOT NULL,
            pattern_type VARCHAR(50) NOT NULL CHECK (pattern_type IN ('large_spike', 'small_spike', 'decreasing', 'random')),
            prices JSONB NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );
          EOF
      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/turnip_test
          OPENAI_API_KEY: mock_key_for_testing
          NODE_ENV: test
      - name: Start frontend server
        run: |
          cd frontend
          npm run dev &
          sleep 10
        env:
          VITE_API_URL: http://localhost:3001/api
      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium
      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-build, e2e-tests]
    if: success()
    steps:
      - name: All tests passed - Ready for deployment
        run: |
          echo "Frontend build: ✓"
          echo "E2E tests: ✓"
          echo "Vercel will automatically deploy to production"